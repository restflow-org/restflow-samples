namespace:

imports:
  - classpath:/org/restflow/groovy/types.yaml
  - classpath:common/support.yaml
  - classpath:common/directors.yaml
  - classpath:ssrl/parsers/labelit.yaml

components:

  - id: FindBestIndexingResult
    className: org.restflow.groovy.GroovyActor
    singleton: false
    properties:
      settings:
        parser: !lref ssrl.parsers.LabelitParser
      inputs: 
        textIn: 
          default: |
            /mnt/exdsstaff/ystsai/schwans/D99N-C6/D99N-C6_2_0001.mccd
            /mnt/exdsstaff/ystsai/schwans/D99N-C6/D99N-C6_2_0080.mccd
            
            LABELIT Indexing results:
            Beam center x  162.40mm, y  162.28mm, distance  219.85mm ; 80% mosaicity=0.40 deg.
          
            Solution  Metric fit  rmsd  #spots  crystal_system   unit_cell                                  volume
            :)  12     0.2401 dg 0.257    587     hexagonal hP   61.16  61.16 142.55  90.00  90.00 120.00   461767
            :)  11     0.2401 dg 0.226    582  orthorhombic oC   61.23 105.87 142.69  90.00  90.00  90.00   925070
            :)  10     0.2401 dg 0.231    583    monoclinic mC   61.23 105.86 142.68  90.00  89.94  90.00   924864
            :)   9     0.2274 dg 0.171    582  orthorhombic oC   61.22 105.85 142.62  90.00  90.00  90.00   924154
            :)   8     0.2274 dg 0.161    580    monoclinic mC   61.21 105.85 142.58  90.00  89.87  90.00   923806
            :)   7     0.2160 dg 0.191    588    monoclinic mC  105.85  61.21 142.58  90.00  89.86  90.00   923836
            :)   6     0.1908 dg 0.172    585  orthorhombic oC   61.06 106.11 142.63  90.00  90.00  90.00   924130
            :)   5     0.1881 dg 0.165    583    monoclinic mC  106.11  61.06 142.55  90.00  90.04  90.00   923545
            :)   4     0.1908 dg 0.247    586    monoclinic mP   61.06 142.63  61.21  90.00 119.90  90.00   462064
            :)   3     0.1702 dg 0.194    580    monoclinic mC  105.89  61.24 142.63  90.00  89.82  90.00   924875
            :)   2     0.0404 dg 0.164    585    monoclinic mC   61.06 106.11 142.55  90.00  89.81  90.00   923524
            :)   1     0.0000 dg 0.242    587     triclinic aP   61.06  61.20 142.55  89.88  89.81  60.10   461762
          
            MOSFLM Integration results:
            Solution  SpaceGroup Beam x   y  distance  Resolution Mosaicity RMS
            :)  12           P3 162.43 162.65  220.01       1.64    0.400000    0.045
                 1           P1 162.43 162.48  220.05       1.64    0.400000    0.033
      step: |
   
        parser.compile();
        parsed = parser.search (textIn);
        
        bestResult = parsed.integrationResults[0]
        bestIndexResult = parsed.indexResults.find { it.id == bestResult.id}
        bestResult.putAll(bestIndexResult)
       
        assert bestIndexResult.id == "12", "failed to scan $bestIndexResult.id"
        assert bestResult.spaceGroup == "P3", "failed to scan $bestIndexResult.spaceGroup"
        assert bestResult.beamX == "162.43", "failed to scan $bestIndexResult.beamX"
        assert bestResult.beamY == "162.65", "failed to scan $bestIndexResult.beamY"
        assert bestResult.distance == "220.01", "failed to scan $bestIndexResult.distance"
        assert bestResult.resolution == "1.64", "failed to scan $bestIndexResult.resolution"
        assert bestResult.mosaicity == "0.400000", "failed to scan mosaicity $bestIndexResult.mosaicity"
        assert bestResult.rms == "0.045", "failed to scan rms $bestIndexResult.rms"
        assert bestResult.metric == "0.2401", "failed to scan metric $bestIndexResult.metric"
        assert bestResult.fit == "dg", "failed to scan fit $bestIndexResult.fit"
        assert bestResult.rmsd == "0.257", "failed to scan rmsd $bestIndexResult.rmsd"
        assert bestResult.spots == "587", "failed to scan spots $bestIndexResult.spots"
        assert bestResult.crystalSystem == "hexagonal hP", "failed to scan crystal system $bestIndexResult.crystalSystem"
        assert bestResult.unitCell.a == "61.16", "failed to scan unit cell a $bestIndexResult.unitCell.a"
        assert bestResult.unitCell.b == "61.16", "failed to scan unit cell b $bestIndexResult.unitCell.b"
        assert bestResult.unitCell.c == "142.55", "failed to scan unit cell c $bestIndexResult.unitCell.c"
        assert bestResult.unitCell.alpha == "90.00", "failed to scan unit cell alpha $bestIndexResult.unitCell.alpha"
        assert bestResult.unitCell.beta == "90.00", "failed to scan unit cell beta $bestIndexResult.unitCell.beta"
        assert bestResult.unitCell.gamma == "120.00", "failed to scan unit cell gamma $bestIndexResult.unitCell.gamma"
        assert bestResult.volume == "461767", "failed to scan volume a $bestIndexResult.volume"

        //output an xds input file
        //import groovy.text.SimpleTemplateEngine
        //def engine = new SimpleTemplateEngine()
        //template = engine.createTemplate(xdsInputTemplate).make(binding)
        //println template.toString()

        import org.yaml.snakeyaml.Yaml;
        import org.yaml.snakeyaml.DumperOptions; 
        DumperOptions options = new DumperOptions();
        options.setLineBreak(DumperOptions.LineBreak.getPlatformLineBreak());
        Yaml yaml = new Yaml(options);
        print yaml.dump(bestIndexResult);

      outputs:
        parsed:
    
  - id: TestConversion
    type: Node
    properties: 
      actor: !ref FindBestIndexingResult
      outflows:
        parsed: /parsed/
        

  #############################
  # declaration of the workflow
  #############################
   
  - id: TextScanner
    type: Workflow
    properties:
#     director: !ref DataDrivenDirector
      director: !ref DemandDrivenDirector
#      director: !ref PublishSubscribeDirector
      nodes:
        - !lref TestConversion
    
